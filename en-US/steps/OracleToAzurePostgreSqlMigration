<!--Using ora2pg to migrate from Oracle to Azure Database for PostgreSQL-->

PostgreSQL is one of world’s most advanced open source databases. This article describes how to use the free ora2pg utility to migrate an Oracle database to PostgreSQL.

You can use ora2pg, a free tool, to migrate an Oracle or MySQL database to a PostgreSQL compatible schema. The utility connects your Oracle database, scans it automatically, and extracts its structure or data. Afterwards ora2pg generates SQL scripts that you can load into your PostgreSQL database.

ora2pg can be used for tasks from reverse engineering an Oracle database, performing a huge enterprise database migration, or simply replicating some Oracle data into a PostgreSQL database. It’s easy to use and doesn't require any Oracle database knowledge other than the ability to provide the parameters needed to connect to the Oracle database.

### Prerequisites
1. Before installing ora2pg, download and install the following from the [meta::cpan site](https://metacpan.org/):

    - DBD-Oracle-1.52.tar.gz: Oracle database driver for the DBI module.
    - DBD-Pg-2.19.3.tar.gz: PostgreSQL database driver for the DBI module.
    - DBI-1.636.tar.gz: Database independent interface for Perl.
    - ora2pg-18.2.tar.gz: ora2pg archive.

2. Download the latest version of the [ora2pg tool](https://sourceforge.net/projects/ora2pg/), and then install it.

### Preparing for migration
After completing the prerequisites, the first step to prepare for the migration is to configure the ora2pg.conf file, which is located at /etc/ora2pg/ora2pg.conf.

Below are a few of the configuration parameters related to using Oracle as source. For this example, assume that we are exporting only the HR Schema.

    ORACLE_DSN    dbi:Oracle:host=hostname;sid=DB_SID;port=1521
    ORACLE_USER  system
    ORACLE_PWD   xxxxx
    SCHEMA   	   HR
    TYPE		TABLE VIEW
    TYPE            TABLE PACKAGE COPY VIEW GRANT SEQUENCE TRIGGER FUNCTION PROCEDURE TABLESPACE TYPE PARTITION
    OUTPUT   hr_schema.sql

### Testing the connection
After setting the Oracle database DSN, you can execute ora2pg to see if it works by using the following command:

    ora2pg -t SHOW_VERSION -c config/ora2pg.conf


ora2pg works by exporting to an output file that the utility uses to convert the schema and generate the insert statements for the data. The data is then imported to the target DB. With ora2pg, if you use the SCHEMA option, the utility will allow only one schema at a time. To use ora2pg to export all schemas, simple comment out the SCHEMA option. In our example, all non-Oracle users will be extracted.

After the configuration is done, run the ora2pg command.

**Note**: To see all options available with the ora2pg utility, run the command **ora2pg -help**.

    Ora2Pg version: 18.2
    Trying to connect to database: dbi:Oracle:host=40.124.6.94;service_name=pdb1;port=1521
    Isolation level: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
    Looking forward functions declaration in schema HR.
    Retrieving table information...
    [1] Scanning table COUNTRIES (0 rows)...
    [2] Scanning table DEPARTMENTS (0 rows)...
    [3] Scanning table EMPLOYEES (0 rows)...
    [4] Scanning table JOBS (0 rows)...
    [5] Scanning table JOB_HISTORY (0 rows)...
    [6] Scanning table LOCATIONS (0 rows)...
    [7] Scanning table REGIONS (0 rows)...
    Retrieving packages information...
    Retrieving table information...
    [1] Scanning table COUNTRIES (0 rows)...
    Warning duplicate table COUNTRIES, maybe a SYNONYM ? Skipped.
    [1] Scanning table DEPARTMENTS (0 rows)...
    Warning duplicate table DEPARTMENTS, maybe a SYNONYM ? Skipped.
    [1] Scanning table EMPLOYEES (0 rows)...
    Warning duplicate table EMPLOYEES, maybe a SYNONYM ? Skipped.
    [1] Scanning table JOBS (0 rows)...
    Warning duplicate table JOBS, maybe a SYNONYM ? Skipped.
    [1] Scanning table JOB_HISTORY (0 rows)...
    Warning duplicate table JOB_HISTORY, maybe a SYNONYM ? Skipped.
    [1] Scanning table LOCATIONS (0 rows)...
    Warning duplicate table LOCATIONS, maybe a SYNONYM ? Skipped.
    [1] Scanning table REGIONS (0 rows)...
    Warning duplicate table REGIONS, maybe a SYNONYM ? Skipped.
    Retrieving views information...
    View EMP_DETAILS_VIEW column aliases:
    EMPLOYEE_ID =>  column id:1
    JOB_ID =>  column id:2
    MANAGER_ID =>  column id:3
    DEPARTMENT_ID =>  column id:4
    LOCATION_ID =>  column id:5
    COUNTRY_ID =>  column id:6
    FIRST_NAME =>  column id:7
    LAST_NAME =>  column id:8
    SALARY =>  column id:9
    COMMISSION_PCT =>  column id:10
    DEPARTMENT_NAME =>  column id:11
    JOB_TITLE =>  column id:12
    CITY =>  column id:13
    STATE_PROVINCE =>  column id:14
    COUNTRY_NAME =>  column id:15
    REGION_NAME =>  column id:16
    [1] Scanning EMP_DETAILS_VIEW...
    Retrieving users/roles/grants information...
    WARNING: Exporting privilege as non DBA user is not allowed, see USER_GRANT
    Retrieving sequences information...
    Retrieving triggers information...
    Retrieving functions information...
    Retrieving procedures information...
    Retrieving tablespaces information...
    WARNING: Exporting tablespace as non DBA user is not allowed, see USER_GRANT
    Retrieving user defined types information...
    Retrieving partitions information...


    Dumping table COUNTRIES...
    Dumping table LOCATIONS...
    Dumping table DEPARTMENTS...
    Dumping table EMPLOYEES...
    Dumping table JOB_HISTORY...
    Dumping table REGIONS...
    Dumping table JOBS...
    Dumping RI COUNTRIES...
    Dumping RI LOCATIONS...
    Dumping RI DEPARTMENTS...
    Dumping RI EMPLOYEES...
    Dumping RI JOB_HISTORY...
    Add packages definition...
    Trying to connect to database: dbi:Oracle:host=40.124.6.94;service_name=pdb1;port=1521
    Isolation level: SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
    Retrieving partitions information...


    Looking how to retrieve data from COUNTRIES...
    Fetching all data from COUNTRIES tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from COUNTRIES to file: HR_output.sql
    Extracted records from table COUNTRIES: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (1 sec., avg: 0 recs/sec).
    Looking how to retrieve data from DEPARTMENTS...
    Fetching all data from DEPARTMENTS tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from DEPARTMENTS to file: HR_output.sql
    Extracted records from table DEPARTMENTS: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (1 sec., avg: 0 recs/sec).
    Looking how to retrieve data from EMPLOYEES...
    Fetching all data from EMPLOYEES tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from EMPLOYEES to file: HR_output.sql
    Extracted records from table EMPLOYEES: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (1 sec., avg: 0 recs/sec).
    Looking how to retrieve data from JOBS...
    Fetching all data from JOBS tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from JOBS to file: HR_output.sql
    Extracted records from table JOBS: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (1 sec., avg: 0 recs/sec).
    Looking how to retrieve data from JOB_HISTORY...
    Fetching all data from JOB_HISTORY tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from JOB_HISTORY to file: HR_output.sql
    Extracted records from table JOB_HISTORY: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (2 sec., avg: 0 recs/sec).
    Looking how to retrieve data from LOCATIONS...
    Fetching all data from LOCATIONS tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from LOCATIONS to file: HR_output.sql
    Extracted records from table LOCATIONS: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (2 sec., avg: 0 recs/sec).
    Looking how to retrieve data from REGIONS...
    Fetching all data from REGIONS tuples...
    DEBUG: Formatting bulk of 10000 data for PostgreSQL.
    DEBUG: Creating output for 10000 tuples
    Dumping data from REGIONS to file: HR_output.sql
    Extracted records from table REGIONS: total_records = 0 (avg: 0 recs/sec)

    [========================>] 0/0 total rows (100.0%) - (2 sec., avg: 0 recs/sec).
    Restarting sequences
    Extracted sequence information for sequence "EMPLOYEES_SEQ"
    Extracted sequence information for sequence "LOCATIONS_SEQ"
    Extracted sequence information for sequence "DEPARTMENTS_SEQ"
    Add views definition...
    Adding view EMP_DETAILS_VIEW...
    Add users/roles/grants privileges...
    Add sequences definition...
    Add triggers definition...
    Dumping trigger SECURE_EMPLOYEES defined on table EMPLOYEES...
    Dumping trigger UPDATE_JOB_HISTORY defined on table EMPLOYEES...
    Add functions definition...
    Total time to translate all functions with 1 process:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
    Add procedures definition...
    Dumping function SECURE_DML...
    Dumping function ADD_JOB_HISTORY...
    Translating of 2 functions took:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
    Total time to translate all functions with 1 process:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
    Add tablespaces definition...
    Add custom types definition...
    Add partitions definition...

After the export is done, to import to the target database, use the following command:

    Psql -h hostname -p 5432 -d databasename -U  username -W  -f ora2pg_output_filename

### Troubleshooting tips

If the **output.sql** file only includes the Pg transaction header and footer there are two possible reasons. If the Perl script ora2pg dumps an ORA-XXX error, then the DSN or log in information is wrong. Check the error and your settings, and then try again. If the Perl script doesn’t indicate any error and the output file is empty, then the user lacks the rights to extract data from the database. Try to connect to the Oracle database as super user or view the directive USER_GRANTS above and at next section, especially the SCHEMA directive.
