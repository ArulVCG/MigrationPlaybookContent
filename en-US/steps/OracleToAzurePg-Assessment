<!--Assess-->

After completing the inventory of the Oracle database(s) to get an idea of the database size and what the challenges are, the next step is to run the Assessment.

Estimating the cost of a migration process from Oracle to PostgreSQL is not easy. To obtain a good assessment of this migration cost, ora2pg will inspect all database objects, all functions and stored procedures to detect if there are still some objects and PL/SQL code that cannot be automatically converted by ora2pg.

ora2pg has a content analysis mode that inspect the Oracle database to generate a text report on what the Oracle database contains and what cannot be exported. 

To activate the "analysis and report" mode, use the export de type SHOW_REPORT as shown in the following command:

```
ora2pg -t SHOW_REPORT 
```

After the database is analyzed, ora2pg, with its ability to convert SQL and PL/SQL code from Oracle syntax to PostgreSQL, can go further by estimating the code difficulties and the time necessary to perform a full database migration.

To estimate the migration cost in man-days, ora2pg allows you to use a configuration directive called ESTIMATE_COST, which can also be enabled at command line: 

```
ora2pg -t SHOW_REPORT --estimate_cost 
```

The default migration unit represent around five minutes for a PostgreSQL expert. If this is your first migration you can get it higher with the configuration directive COST_UNIT_VALUE or the --cost_unit_value command line option: 

```
ADD SCRIPT TEXT HERE
```

The last line of the report shows the total estimated migration code in man-days following the number of migration units estimated for each object. This migration unit represents around five minutes for a PostgreSQL expert.

If this is your first migration, you can get it higher with the configuration directive COST_UNIT_VALUE or the --cost_unit_value command line option. Find below some variations of assessment a) tables assessment; b) columns assessment c) schema assessment using default cost_unit (5 min) d) schema assessment using 10 min as cost unit.

```
ora2pg -t SHOW_TABLE -c c:\ora2pg\ora2pg_hr.conf > c:\ts303\hr_migration\reports\tables.txt ora2pg -t SHOW_COLUMN -c c:\ora2pg\ora2pg_hr.conf > c:\ts303\hr_migration\reports\columns.txt 
ora2pg -t SHOW_REPORT -c c:\ora2pg\ora2pg_hr.conf --dump_as_html --estimate_cost > c:\ts303\hr
_migration\reports\report.html  
ora2pg -t SHOW_REPORT -c c:\ora2pg\ora2pg_hr.conf â€“-cost_unit_value 10 --dump_as_html --estima te_cost > c:\ts303\hr_migration\reports\report2.html  
```

The output of the schema assessment is illustrated as below:

**Migration level: B-5**

```
    Migration levels: 
A	- Migration that might be run automatically 
B	- Migration with code rewrite and a human-days cost up to 5 days         C - Migration with code rewrite and a human-days cost above 5 days 
    Technical levels: 
1	= trivial: no stored functions and no triggers 
2	= easy: no stored functions but with triggers, no manual rewriting 
3	= simple: stored functions and/or triggers, no manual rewriting 
4	= manual: no stored functions but with triggers or views with code rewriting 
5	= difficult: stored functions and/or triggers with code rewriting
```

The assessment consists in a letter A or B to specify whether the migration needs manual rewriting or not, and a number from 1 to 5 to indicate the technical difficulty level. You have an additional option -human_days_limit to specify the number of human-days limit where the migration level should be set to C to indicate that it need a huge amount of work and a full project management with migration support. Default is 10 human-days. You can use the configuration directive HUMAN_DAYS_LIMIT to change this default value permanently. 

This feature has been developed to help deciding which database could be migrated first and what is the team that need be mobilized. 
